[{"title":"MySQL索引","date":"2021-05-14T01:34:16.000Z","path":"2021/05/14/MySQL索引/","text":"1、索引分类 索引的作用 提高查询速度 确保数据的唯一性 可以加速表和表之间的连接 , 实现表与表之间的参照完整性 使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间 全文检索字段进行搜索优化. 分类 主键索引 (Primary Key) 唯一索引 (Unique) 常规索引 (Index) 全文索引 (FullText) 2、主键索引主键 : 某一个属性组能唯一标识一条记录 特点 : 最常见的索引类型 确保数据记录的唯一性 确定特定数据记录在数据库中的位置 12345CREATE TABLE `Grade`(`GradeID` INT(11) AUTO_INCREMENT PRIMARYKEY,`GradeName` VARCHAR(32) NOT NULL UNIQUE// 或 UNIQUE KEY `GradeID` (`GradeID`)) 3、唯一索引作用 : 避免同一个表中某数据列中的值重复 与主键索引的区别 主键索引只能有一个 唯一索引可能有多个 4、常规索引作用 : 快速定位特定数据 注意 : index 和 key 关键字都可以设置常规索引 应加在查询找条件的字段 不宜添加太多常规索引,影响数据的插入,删除和修改操作 1234567CREATE TABLE `result`( // 省略一些代码INDEX/KEY `ind` (`studentNo`,`subjectNo`) // 创建表时添加) // 创建后添加ALTER TABLE `result` ADD INDEX `ind`(`studentNo`,`subjectNo`); 5、全文索引百度搜索：全文索引 作用 : 快速定位特定数据 注意 : 只能用于MyISAM类型的数据表 只能用于CHAR , VARCHAR , TEXT数据列类型 适合大型数据集 6、索引准则 索引不是越多越好 不要对经常变动的数据加索引 小数据量的表建议不要加索引 索引一般应加在查找条件的字段 7、三大范式第一范式 (1st NF) 第一范式的目标是确保每列的原子性,如果每列都是不可再分的最小数据单元,则满足第一范式 第二范式(2nd NF) 第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF） 第二范式要求每个表只描述一件事情 第三范式(3rd NF) 如果一个关系满足第二范式,并且除了主键以外的其他列都不传递依赖于主键列,则满足第三范式 第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关","link":"","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://holmexin.github.io/tags/MySQL/"}]},{"title":"MySQL事务","date":"2021-05-13T13:10:46.000Z","path":"2021/05/13/MySQL事务/","text":"1、概述 什么是事务 事务就是将一组SQL语句放在同一批次内去执行 如果一个SQL语句出错,则该批次内的所有SQL都将被取消执行 MySQL事务处理只支持InnoDB和BDB数据表类型 ACID 特性 原子性(Atomic) 整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。 一致性(Consist) 一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。 隔离性(Isolated) 隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。 持久性(Durable) 在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。 2、事务实现基本语法： 123456789101112131415161718192021222324// 使用set语句来改变自动提交模式SET autocommit = 0; /*关闭*/SET autocommit = 1; /*开启*/// 注意://- 1.MySQL中默认是自动提交//- 2.使用事务时应先关闭自动提交 // 开始一个事务,标记事务的起始点START TRANSACTION// 提交一个事务给数据库COMMIT // 将事务回滚,数据回到本次事务的初始状态ROLLBACK // 还原MySQL数据库的自动提交SET autocommit =1;// 保存点SAVEPOINT 保存点名称 // 设置一个事务保存点ROLLBACK TO SAVEPOINT 保存点名称 // 回滚到保存点RELEASE SAVEPOINT 保存点名称 // 删除保存点 12345678// 转账实现SET autocommit = 0; // 关闭自动提交START TRANSACTION; // 开始一个事务,标记事务的起始点UPDATE account SET cash=cash-500 WHERE `name`=&#x27;A&#x27;;UPDATE account SET cash=cash+500 WHERE `name`=&#x27;B&#x27;;COMMIT; // 提交事务// rollback;SET autocommit = 1; // 恢复自动提交","link":"","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://holmexin.github.io/tags/MySQL/"}]},{"title":"MySQL常用命令","date":"2021-05-13T12:32:39.000Z","path":"2021/05/13/MySQL常用命令/","text":"MySQL是现在流行的开源的，免费的关系型数据库。由瑞典MySQLAB 公司开发，目前属于 Oracle 旗下产品。 官网：https://www.mysql.com/ 1、添加数据 INSERT 123456INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;)INSERT INTO grade(gradename) VALUES (&#x27;大一&#x27;);// 一次插入多条数据INSERT INTO grade(gradename) VALUES (&#x27;大三&#x27;),(&#x27;大四&#x27;); 2、修改数据 UPDATE 123456789UPDATE 表名 SET column_name=value [,column_name2=value2,...] [WHEREcondition];// column_name 为要更改的数据列// value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果// condition 为筛选条件 , 如不指定则修改该表的所有列数据// 修改年级信息UPDATE grade SET gradename = &#x27;高中&#x27; WHERE gradeid = 1; 3、删除数据 DELETE 1234DELETE FROM 表名 [WHERE condition];// 删除最后一个数据DELETE FROM grade WHERE gradeid = 5 4、查询数据 SELECT 12345678910SELECT [ALL | DISTINCT]&#123;* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]&#125;FROM table_name [as table_alias][left | right | inner join table_name2] // 联合查询[WHERE ...] // 指定结果需满足的条件[GROUP BY ...] // 指定结果按照哪几个字段来分组[HAVING] // 过滤分组的记录必须满足的次要条件[ORDER BY ...] // 指定查询记录按一个或多个条件排序[LIMIT &#123;[offset,]row_count | row_countOFFSET offset&#125;];// 指定查询的记录从哪条至哪条","link":"","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://holmexin.github.io/tags/MySQL/"}]},{"title":"Hello World","date":"2021-05-12T08:10:11.559Z","path":"2021/05/12/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"","tags":[]}]